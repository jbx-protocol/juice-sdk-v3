/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../../common";

export interface JBETHERC20SplitsPayerDeployerInterface
  extends utils.Interface {
  functions: {
    "deploySplitsPayer(uint256,uint256,uint256,address,uint256,address,bool,string,bytes,bool,address)": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "deploySplitsPayer"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "deploySplitsPayer",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      string,
      boolean,
      string,
      BytesLike,
      boolean,
      string
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "deploySplitsPayer",
    data: BytesLike
  ): Result;

  events: {
    "DeploySplitsPayer(address,uint256,uint256,uint256,address,uint256,address,bool,string,bytes,bool,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DeploySplitsPayer"): EventFragment;
}

export interface DeploySplitsPayerEventObject {
  splitsPayer: string;
  defaultSplitsProjectId: BigNumber;
  defaultSplitsDomain: BigNumber;
  defaultSplitsGroup: BigNumber;
  splitsStore: string;
  defaultProjectId: BigNumber;
  defaultBeneficiary: string;
  defaultPreferClaimedTokens: boolean;
  defaultMemo: string;
  defaultMetadata: string;
  preferAddToBalance: boolean;
  owner: string;
  caller: string;
}
export type DeploySplitsPayerEvent = TypedEvent<
  [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    string,
    boolean,
    string,
    string,
    boolean,
    string,
    string
  ],
  DeploySplitsPayerEventObject
>;

export type DeploySplitsPayerEventFilter =
  TypedEventFilter<DeploySplitsPayerEvent>;

export interface JBETHERC20SplitsPayerDeployer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: JBETHERC20SplitsPayerDeployerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     *  Allows anyone to deploy a new splits payer contract.
     * @param _defaultBeneficiary The address that'll receive the project's tokens when the splits payer receives payments.
     * @param _defaultMemo The memo that'll be forwarded with the splits payer's received payments.
     * @param _defaultMetadata The metadata that'll be forwarded with the splits payer's received payments.
     * @param _defaultPreferAddToBalance A flag indicating if received payments should call the `pay` function or the `addToBalance` function of a project.
     * @param _defaultPreferClaimedTokens A flag indicating whether issued tokens from the splits payer's received payments should be automatically claimed into the beneficiary's wallet.
     * @param _defaultProjectId The ID of the project whose treasury should be forwarded the splits payer contract's received payment leftovers after distributing to the default splits group.
     * @param _defaultSplitsDomain The splits domain to payout when this contract receives direct payments.
     * @param _defaultSplitsGroup The splits group to payout when this contract receives direct payments.
     * @param _defaultSplitsProjectId The ID of project for which the default splits are stored.
     * @param _owner The address that will own the splits payer.
     * @param _splitsStore A contract that stores splits for each project.
     */
    deploySplitsPayer(
      _defaultSplitsProjectId: BigNumberish,
      _defaultSplitsDomain: BigNumberish,
      _defaultSplitsGroup: BigNumberish,
      _splitsStore: string,
      _defaultProjectId: BigNumberish,
      _defaultBeneficiary: string,
      _defaultPreferClaimedTokens: boolean,
      _defaultMemo: string,
      _defaultMetadata: BytesLike,
      _defaultPreferAddToBalance: boolean,
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  /**
   *  Allows anyone to deploy a new splits payer contract.
   * @param _defaultBeneficiary The address that'll receive the project's tokens when the splits payer receives payments.
   * @param _defaultMemo The memo that'll be forwarded with the splits payer's received payments.
   * @param _defaultMetadata The metadata that'll be forwarded with the splits payer's received payments.
   * @param _defaultPreferAddToBalance A flag indicating if received payments should call the `pay` function or the `addToBalance` function of a project.
   * @param _defaultPreferClaimedTokens A flag indicating whether issued tokens from the splits payer's received payments should be automatically claimed into the beneficiary's wallet.
   * @param _defaultProjectId The ID of the project whose treasury should be forwarded the splits payer contract's received payment leftovers after distributing to the default splits group.
   * @param _defaultSplitsDomain The splits domain to payout when this contract receives direct payments.
   * @param _defaultSplitsGroup The splits group to payout when this contract receives direct payments.
   * @param _defaultSplitsProjectId The ID of project for which the default splits are stored.
   * @param _owner The address that will own the splits payer.
   * @param _splitsStore A contract that stores splits for each project.
   */
  deploySplitsPayer(
    _defaultSplitsProjectId: BigNumberish,
    _defaultSplitsDomain: BigNumberish,
    _defaultSplitsGroup: BigNumberish,
    _splitsStore: string,
    _defaultProjectId: BigNumberish,
    _defaultBeneficiary: string,
    _defaultPreferClaimedTokens: boolean,
    _defaultMemo: string,
    _defaultMetadata: BytesLike,
    _defaultPreferAddToBalance: boolean,
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     *  Allows anyone to deploy a new splits payer contract.
     * @param _defaultBeneficiary The address that'll receive the project's tokens when the splits payer receives payments.
     * @param _defaultMemo The memo that'll be forwarded with the splits payer's received payments.
     * @param _defaultMetadata The metadata that'll be forwarded with the splits payer's received payments.
     * @param _defaultPreferAddToBalance A flag indicating if received payments should call the `pay` function or the `addToBalance` function of a project.
     * @param _defaultPreferClaimedTokens A flag indicating whether issued tokens from the splits payer's received payments should be automatically claimed into the beneficiary's wallet.
     * @param _defaultProjectId The ID of the project whose treasury should be forwarded the splits payer contract's received payment leftovers after distributing to the default splits group.
     * @param _defaultSplitsDomain The splits domain to payout when this contract receives direct payments.
     * @param _defaultSplitsGroup The splits group to payout when this contract receives direct payments.
     * @param _defaultSplitsProjectId The ID of project for which the default splits are stored.
     * @param _owner The address that will own the splits payer.
     * @param _splitsStore A contract that stores splits for each project.
     */
    deploySplitsPayer(
      _defaultSplitsProjectId: BigNumberish,
      _defaultSplitsDomain: BigNumberish,
      _defaultSplitsGroup: BigNumberish,
      _splitsStore: string,
      _defaultProjectId: BigNumberish,
      _defaultBeneficiary: string,
      _defaultPreferClaimedTokens: boolean,
      _defaultMemo: string,
      _defaultMetadata: BytesLike,
      _defaultPreferAddToBalance: boolean,
      _owner: string,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "DeploySplitsPayer(address,uint256,uint256,uint256,address,uint256,address,bool,string,bytes,bool,address,address)"(
      splitsPayer?: string | null,
      defaultSplitsProjectId?: null,
      defaultSplitsDomain?: null,
      defaultSplitsGroup?: null,
      splitsStore?: null,
      defaultProjectId?: null,
      defaultBeneficiary?: null,
      defaultPreferClaimedTokens?: null,
      defaultMemo?: null,
      defaultMetadata?: null,
      preferAddToBalance?: null,
      owner?: null,
      caller?: null
    ): DeploySplitsPayerEventFilter;
    DeploySplitsPayer(
      splitsPayer?: string | null,
      defaultSplitsProjectId?: null,
      defaultSplitsDomain?: null,
      defaultSplitsGroup?: null,
      splitsStore?: null,
      defaultProjectId?: null,
      defaultBeneficiary?: null,
      defaultPreferClaimedTokens?: null,
      defaultMemo?: null,
      defaultMetadata?: null,
      preferAddToBalance?: null,
      owner?: null,
      caller?: null
    ): DeploySplitsPayerEventFilter;
  };

  estimateGas: {
    /**
     *  Allows anyone to deploy a new splits payer contract.
     * @param _defaultBeneficiary The address that'll receive the project's tokens when the splits payer receives payments.
     * @param _defaultMemo The memo that'll be forwarded with the splits payer's received payments.
     * @param _defaultMetadata The metadata that'll be forwarded with the splits payer's received payments.
     * @param _defaultPreferAddToBalance A flag indicating if received payments should call the `pay` function or the `addToBalance` function of a project.
     * @param _defaultPreferClaimedTokens A flag indicating whether issued tokens from the splits payer's received payments should be automatically claimed into the beneficiary's wallet.
     * @param _defaultProjectId The ID of the project whose treasury should be forwarded the splits payer contract's received payment leftovers after distributing to the default splits group.
     * @param _defaultSplitsDomain The splits domain to payout when this contract receives direct payments.
     * @param _defaultSplitsGroup The splits group to payout when this contract receives direct payments.
     * @param _defaultSplitsProjectId The ID of project for which the default splits are stored.
     * @param _owner The address that will own the splits payer.
     * @param _splitsStore A contract that stores splits for each project.
     */
    deploySplitsPayer(
      _defaultSplitsProjectId: BigNumberish,
      _defaultSplitsDomain: BigNumberish,
      _defaultSplitsGroup: BigNumberish,
      _splitsStore: string,
      _defaultProjectId: BigNumberish,
      _defaultBeneficiary: string,
      _defaultPreferClaimedTokens: boolean,
      _defaultMemo: string,
      _defaultMetadata: BytesLike,
      _defaultPreferAddToBalance: boolean,
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     *  Allows anyone to deploy a new splits payer contract.
     * @param _defaultBeneficiary The address that'll receive the project's tokens when the splits payer receives payments.
     * @param _defaultMemo The memo that'll be forwarded with the splits payer's received payments.
     * @param _defaultMetadata The metadata that'll be forwarded with the splits payer's received payments.
     * @param _defaultPreferAddToBalance A flag indicating if received payments should call the `pay` function or the `addToBalance` function of a project.
     * @param _defaultPreferClaimedTokens A flag indicating whether issued tokens from the splits payer's received payments should be automatically claimed into the beneficiary's wallet.
     * @param _defaultProjectId The ID of the project whose treasury should be forwarded the splits payer contract's received payment leftovers after distributing to the default splits group.
     * @param _defaultSplitsDomain The splits domain to payout when this contract receives direct payments.
     * @param _defaultSplitsGroup The splits group to payout when this contract receives direct payments.
     * @param _defaultSplitsProjectId The ID of project for which the default splits are stored.
     * @param _owner The address that will own the splits payer.
     * @param _splitsStore A contract that stores splits for each project.
     */
    deploySplitsPayer(
      _defaultSplitsProjectId: BigNumberish,
      _defaultSplitsDomain: BigNumberish,
      _defaultSplitsGroup: BigNumberish,
      _splitsStore: string,
      _defaultProjectId: BigNumberish,
      _defaultBeneficiary: string,
      _defaultPreferClaimedTokens: boolean,
      _defaultMemo: string,
      _defaultMetadata: BytesLike,
      _defaultPreferAddToBalance: boolean,
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
