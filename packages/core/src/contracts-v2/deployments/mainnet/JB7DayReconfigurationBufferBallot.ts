/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../../common";

export interface JB7DayReconfigurationBufferBallotInterface
  extends utils.Interface {
  functions: {
    "duration()": FunctionFragment;
    "finalState(uint256,uint256)": FunctionFragment;
    "finalize(uint256,uint256)": FunctionFragment;
    "fundingCycleStore()": FunctionFragment;
    "stateOf(uint256,uint256,uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "duration"
      | "finalState"
      | "finalize"
      | "fundingCycleStore"
      | "stateOf"
      | "supportsInterface"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "duration", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "finalState",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "finalize",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fundingCycleStore",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stateOf",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "duration", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "finalState", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "finalize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fundingCycleStore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stateOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;

  events: {
    "Finalize(uint256,uint256,uint8,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Finalize"): EventFragment;
}

export interface FinalizeEventObject {
  projectId: BigNumber;
  configuration: BigNumber;
  ballotState: number;
  caller: string;
}
export type FinalizeEvent = TypedEvent<
  [BigNumber, BigNumber, number, string],
  FinalizeEventObject
>;

export type FinalizeEventFilter = TypedEventFilter<FinalizeEvent>;

export interface JB7DayReconfigurationBufferBallot extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: JB7DayReconfigurationBufferBallotInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     *  The number of seconds that must pass for a funding cycle reconfiguration to become either `Approved` or `Failed`.
     */
    duration(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     *  The finalized state.
     */
    finalState(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    /**
     *  Finalizes a configuration state if the current state has settled.
     * @param _configured The configuration of the funding cycle to check the state of.
     * @param _projectId The ID of the project to which the funding cycle being checked belongs.
     */
    finalize(
      _projectId: BigNumberish,
      _configured: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * The contract storing all funding cycle configurations.
     */
    fundingCycleStore(overrides?: CallOverrides): Promise<[string]>;

    /**
     *  The approval state of a particular funding cycle.
     * @param _configured The configuration of the funding cycle to check the state of.
     * @param _projectId The ID of the project to which the funding cycle being checked belongs.
     * @param _start The start timestamp of the funding cycle to check the state of.
     */
    stateOf(
      _projectId: BigNumberish,
      _configured: BigNumberish,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    /**
     *  See {IERC165-supportsInterface}.
     * Indicates if this contract adheres to the specified interface.
     * @param _interfaceId The ID of the interface to check for adherance to.
     */
    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  /**
   *  The number of seconds that must pass for a funding cycle reconfiguration to become either `Approved` or `Failed`.
   */
  duration(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   *  The finalized state.
   */
  finalState(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  /**
   *  Finalizes a configuration state if the current state has settled.
   * @param _configured The configuration of the funding cycle to check the state of.
   * @param _projectId The ID of the project to which the funding cycle being checked belongs.
   */
  finalize(
    _projectId: BigNumberish,
    _configured: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * The contract storing all funding cycle configurations.
   */
  fundingCycleStore(overrides?: CallOverrides): Promise<string>;

  /**
   *  The approval state of a particular funding cycle.
   * @param _configured The configuration of the funding cycle to check the state of.
   * @param _projectId The ID of the project to which the funding cycle being checked belongs.
   * @param _start The start timestamp of the funding cycle to check the state of.
   */
  stateOf(
    _projectId: BigNumberish,
    _configured: BigNumberish,
    _start: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  /**
   *  See {IERC165-supportsInterface}.
   * Indicates if this contract adheres to the specified interface.
   * @param _interfaceId The ID of the interface to check for adherance to.
   */
  supportsInterface(
    _interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    /**
     *  The number of seconds that must pass for a funding cycle reconfiguration to become either `Approved` or `Failed`.
     */
    duration(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     *  The finalized state.
     */
    finalState(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    /**
     *  Finalizes a configuration state if the current state has settled.
     * @param _configured The configuration of the funding cycle to check the state of.
     * @param _projectId The ID of the project to which the funding cycle being checked belongs.
     */
    finalize(
      _projectId: BigNumberish,
      _configured: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    /**
     * The contract storing all funding cycle configurations.
     */
    fundingCycleStore(overrides?: CallOverrides): Promise<string>;

    /**
     *  The approval state of a particular funding cycle.
     * @param _configured The configuration of the funding cycle to check the state of.
     * @param _projectId The ID of the project to which the funding cycle being checked belongs.
     * @param _start The start timestamp of the funding cycle to check the state of.
     */
    stateOf(
      _projectId: BigNumberish,
      _configured: BigNumberish,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    /**
     *  See {IERC165-supportsInterface}.
     * Indicates if this contract adheres to the specified interface.
     * @param _interfaceId The ID of the interface to check for adherance to.
     */
    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "Finalize(uint256,uint256,uint8,address)"(
      projectId?: BigNumberish | null,
      configuration?: BigNumberish | null,
      ballotState?: BigNumberish | null,
      caller?: null
    ): FinalizeEventFilter;
    Finalize(
      projectId?: BigNumberish | null,
      configuration?: BigNumberish | null,
      ballotState?: BigNumberish | null,
      caller?: null
    ): FinalizeEventFilter;
  };

  estimateGas: {
    /**
     *  The number of seconds that must pass for a funding cycle reconfiguration to become either `Approved` or `Failed`.
     */
    duration(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     *  The finalized state.
     */
    finalState(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     *  Finalizes a configuration state if the current state has settled.
     * @param _configured The configuration of the funding cycle to check the state of.
     * @param _projectId The ID of the project to which the funding cycle being checked belongs.
     */
    finalize(
      _projectId: BigNumberish,
      _configured: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * The contract storing all funding cycle configurations.
     */
    fundingCycleStore(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     *  The approval state of a particular funding cycle.
     * @param _configured The configuration of the funding cycle to check the state of.
     * @param _projectId The ID of the project to which the funding cycle being checked belongs.
     * @param _start The start timestamp of the funding cycle to check the state of.
     */
    stateOf(
      _projectId: BigNumberish,
      _configured: BigNumberish,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     *  See {IERC165-supportsInterface}.
     * Indicates if this contract adheres to the specified interface.
     * @param _interfaceId The ID of the interface to check for adherance to.
     */
    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     *  The number of seconds that must pass for a funding cycle reconfiguration to become either `Approved` or `Failed`.
     */
    duration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     *  The finalized state.
     */
    finalState(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     *  Finalizes a configuration state if the current state has settled.
     * @param _configured The configuration of the funding cycle to check the state of.
     * @param _projectId The ID of the project to which the funding cycle being checked belongs.
     */
    finalize(
      _projectId: BigNumberish,
      _configured: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * The contract storing all funding cycle configurations.
     */
    fundingCycleStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     *  The approval state of a particular funding cycle.
     * @param _configured The configuration of the funding cycle to check the state of.
     * @param _projectId The ID of the project to which the funding cycle being checked belongs.
     * @param _start The start timestamp of the funding cycle to check the state of.
     */
    stateOf(
      _projectId: BigNumberish,
      _configured: BigNumberish,
      _start: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     *  See {IERC165-supportsInterface}.
     * Indicates if this contract adheres to the specified interface.
     * @param _interfaceId The ID of the interface to check for adherance to.
     */
    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
