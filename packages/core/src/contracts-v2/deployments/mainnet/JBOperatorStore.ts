/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../../common";

export type JBOperatorDataStruct = {
  operator: string;
  domain: BigNumberish;
  permissionIndexes: BigNumberish[];
};

export type JBOperatorDataStructOutput = [string, BigNumber, BigNumber[]] & {
  operator: string;
  domain: BigNumber;
  permissionIndexes: BigNumber[];
};

export interface JBOperatorStoreInterface extends utils.Interface {
  functions: {
    "hasPermission(address,address,uint256,uint256)": FunctionFragment;
    "hasPermissions(address,address,uint256,uint256[])": FunctionFragment;
    "permissionsOf(address,address,uint256)": FunctionFragment;
    "setOperator((address,uint256,uint256[]))": FunctionFragment;
    "setOperators((address,uint256,uint256[])[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "hasPermission"
      | "hasPermissions"
      | "permissionsOf"
      | "setOperator"
      | "setOperators"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "hasPermission",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasPermissions",
    values: [string, string, BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "permissionsOf",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOperator",
    values: [JBOperatorDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setOperators",
    values: [JBOperatorDataStruct[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "hasPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permissionsOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperators",
    data: BytesLike
  ): Result;

  events: {
    "SetOperator(address,address,uint256,uint256[],uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SetOperator"): EventFragment;
}

export interface SetOperatorEventObject {
  operator: string;
  account: string;
  domain: BigNumber;
  permissionIndexes: BigNumber[];
  packed: BigNumber;
}
export type SetOperatorEvent = TypedEvent<
  [string, string, BigNumber, BigNumber[], BigNumber],
  SetOperatorEventObject
>;

export type SetOperatorEventFilter = TypedEventFilter<SetOperatorEvent>;

export interface JBOperatorStore extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: JBOperatorStoreInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     *  Whether or not an operator has the permission to take a certain action pertaining to the specified domain.
     * @param _account The account that has given out permissions to the operator.
     * @param _domain The domain that the operator has been given permissions to operate.
     * @param _operator The operator to check.
     * @param _permissionIndex The permission index to check for.
     */
    hasPermission(
      _operator: string,
      _account: string,
      _domain: BigNumberish,
      _permissionIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     *  Whether or not an operator has the permission to take certain actions pertaining to the specified domain.
     * @param _account The account that has given out permissions to the operator.
     * @param _domain The domain that the operator has been given permissions to operate.
     * @param _operator The operator to check.
     * @param _permissionIndexes An array of permission indexes to check for.
     */
    hasPermissions(
      _operator: string,
      _account: string,
      _domain: BigNumberish,
      _permissionIndexes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * The permissions that an operator has been given to operate on a specific domain.
     */
    permissionsOf(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setOperator(
      _operatorData: JBOperatorDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOperators(
      _operatorData: JBOperatorDataStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  /**
   *  Whether or not an operator has the permission to take a certain action pertaining to the specified domain.
   * @param _account The account that has given out permissions to the operator.
   * @param _domain The domain that the operator has been given permissions to operate.
   * @param _operator The operator to check.
   * @param _permissionIndex The permission index to check for.
   */
  hasPermission(
    _operator: string,
    _account: string,
    _domain: BigNumberish,
    _permissionIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   *  Whether or not an operator has the permission to take certain actions pertaining to the specified domain.
   * @param _account The account that has given out permissions to the operator.
   * @param _domain The domain that the operator has been given permissions to operate.
   * @param _operator The operator to check.
   * @param _permissionIndexes An array of permission indexes to check for.
   */
  hasPermissions(
    _operator: string,
    _account: string,
    _domain: BigNumberish,
    _permissionIndexes: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * The permissions that an operator has been given to operate on a specific domain.
   */
  permissionsOf(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setOperator(
    _operatorData: JBOperatorDataStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOperators(
    _operatorData: JBOperatorDataStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     *  Whether or not an operator has the permission to take a certain action pertaining to the specified domain.
     * @param _account The account that has given out permissions to the operator.
     * @param _domain The domain that the operator has been given permissions to operate.
     * @param _operator The operator to check.
     * @param _permissionIndex The permission index to check for.
     */
    hasPermission(
      _operator: string,
      _account: string,
      _domain: BigNumberish,
      _permissionIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     *  Whether or not an operator has the permission to take certain actions pertaining to the specified domain.
     * @param _account The account that has given out permissions to the operator.
     * @param _domain The domain that the operator has been given permissions to operate.
     * @param _operator The operator to check.
     * @param _permissionIndexes An array of permission indexes to check for.
     */
    hasPermissions(
      _operator: string,
      _account: string,
      _domain: BigNumberish,
      _permissionIndexes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * The permissions that an operator has been given to operate on a specific domain.
     */
    permissionsOf(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setOperator(
      _operatorData: JBOperatorDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setOperators(
      _operatorData: JBOperatorDataStruct[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "SetOperator(address,address,uint256,uint256[],uint256)"(
      operator?: string | null,
      account?: string | null,
      domain?: BigNumberish | null,
      permissionIndexes?: null,
      packed?: null
    ): SetOperatorEventFilter;
    SetOperator(
      operator?: string | null,
      account?: string | null,
      domain?: BigNumberish | null,
      permissionIndexes?: null,
      packed?: null
    ): SetOperatorEventFilter;
  };

  estimateGas: {
    /**
     *  Whether or not an operator has the permission to take a certain action pertaining to the specified domain.
     * @param _account The account that has given out permissions to the operator.
     * @param _domain The domain that the operator has been given permissions to operate.
     * @param _operator The operator to check.
     * @param _permissionIndex The permission index to check for.
     */
    hasPermission(
      _operator: string,
      _account: string,
      _domain: BigNumberish,
      _permissionIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     *  Whether or not an operator has the permission to take certain actions pertaining to the specified domain.
     * @param _account The account that has given out permissions to the operator.
     * @param _domain The domain that the operator has been given permissions to operate.
     * @param _operator The operator to check.
     * @param _permissionIndexes An array of permission indexes to check for.
     */
    hasPermissions(
      _operator: string,
      _account: string,
      _domain: BigNumberish,
      _permissionIndexes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * The permissions that an operator has been given to operate on a specific domain.
     */
    permissionsOf(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setOperator(
      _operatorData: JBOperatorDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOperators(
      _operatorData: JBOperatorDataStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     *  Whether or not an operator has the permission to take a certain action pertaining to the specified domain.
     * @param _account The account that has given out permissions to the operator.
     * @param _domain The domain that the operator has been given permissions to operate.
     * @param _operator The operator to check.
     * @param _permissionIndex The permission index to check for.
     */
    hasPermission(
      _operator: string,
      _account: string,
      _domain: BigNumberish,
      _permissionIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     *  Whether or not an operator has the permission to take certain actions pertaining to the specified domain.
     * @param _account The account that has given out permissions to the operator.
     * @param _domain The domain that the operator has been given permissions to operate.
     * @param _operator The operator to check.
     * @param _permissionIndexes An array of permission indexes to check for.
     */
    hasPermissions(
      _operator: string,
      _account: string,
      _domain: BigNumberish,
      _permissionIndexes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * The permissions that an operator has been given to operate on a specific domain.
     */
    permissionsOf(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setOperator(
      _operatorData: JBOperatorDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOperators(
      _operatorData: JBOperatorDataStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
