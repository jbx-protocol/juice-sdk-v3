/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../../common";

export type JBFundingCycleDataStruct = {
  duration: BigNumberish;
  weight: BigNumberish;
  discountRate: BigNumberish;
  ballot: string;
};

export type JBFundingCycleDataStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  string
] & {
  duration: BigNumber;
  weight: BigNumber;
  discountRate: BigNumber;
  ballot: string;
};

export type JBFundingCycleStruct = {
  number: BigNumberish;
  configuration: BigNumberish;
  basedOn: BigNumberish;
  start: BigNumberish;
  duration: BigNumberish;
  weight: BigNumberish;
  discountRate: BigNumberish;
  ballot: string;
  metadata: BigNumberish;
};

export type JBFundingCycleStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  BigNumber
] & {
  number: BigNumber;
  configuration: BigNumber;
  basedOn: BigNumber;
  start: BigNumber;
  duration: BigNumber;
  weight: BigNumber;
  discountRate: BigNumber;
  ballot: string;
  metadata: BigNumber;
};

export interface JBFundingCycleStoreInterface extends utils.Interface {
  functions: {
    "configureFor(uint256,(uint256,uint256,uint256,address),uint256,uint256)": FunctionFragment;
    "currentBallotStateOf(uint256)": FunctionFragment;
    "currentOf(uint256)": FunctionFragment;
    "directory()": FunctionFragment;
    "get(uint256,uint256)": FunctionFragment;
    "latestConfigurationOf(uint256)": FunctionFragment;
    "latestConfiguredOf(uint256)": FunctionFragment;
    "queuedOf(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "configureFor"
      | "currentBallotStateOf"
      | "currentOf"
      | "directory"
      | "get"
      | "latestConfigurationOf"
      | "latestConfiguredOf"
      | "queuedOf"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "configureFor",
    values: [BigNumberish, JBFundingCycleDataStruct, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentBallotStateOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "directory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "get",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "latestConfigurationOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "latestConfiguredOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "queuedOf",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "configureFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentBallotStateOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "currentOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "directory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "get", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "latestConfigurationOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestConfiguredOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "queuedOf", data: BytesLike): Result;

  events: {
    "Configure(uint256,uint256,tuple,uint256,uint256,address)": EventFragment;
    "Init(uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Configure"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Init"): EventFragment;
}

export interface ConfigureEventObject {
  configuration: BigNumber;
  projectId: BigNumber;
  data: JBFundingCycleDataStructOutput;
  metadata: BigNumber;
  mustStartAtOrAfter: BigNumber;
  caller: string;
}
export type ConfigureEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    JBFundingCycleDataStructOutput,
    BigNumber,
    BigNumber,
    string
  ],
  ConfigureEventObject
>;

export type ConfigureEventFilter = TypedEventFilter<ConfigureEvent>;

export interface InitEventObject {
  configuration: BigNumber;
  projectId: BigNumber;
  basedOn: BigNumber;
}
export type InitEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  InitEventObject
>;

export type InitEventFilter = TypedEventFilter<InitEvent>;

export interface JBFundingCycleStore extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: JBFundingCycleStoreInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    configureFor(
      _projectId: BigNumberish,
      _data: JBFundingCycleDataStruct,
      _metadata: BigNumberish,
      _mustStartAtOrAfter: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     *  The current ballot state of the project.
     * @param _projectId The ID of the project to check the ballot state of.
     */
    currentBallotStateOf(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    /**
     * If a current funding cycle of the project is not found, returns an empty funding cycle with all properties set to 0.
     *  The funding cycle that is currently active for the specified project.
     * @param _projectId The ID of the project to get the current funding cycle of.
     */
    currentOf(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [JBFundingCycleStructOutput] & {
        fundingCycle: JBFundingCycleStructOutput;
      }
    >;

    /**
     *  The directory of terminals and controllers for projects.
     */
    directory(overrides?: CallOverrides): Promise<[string]>;

    /**
     *  Get the funding cycle with the given configuration for the specified project.
     * @param _configuration The configuration of the funding cycle to get.
     * @param _projectId The ID of the project to which the funding cycle belongs.
     */
    get(
      _projectId: BigNumberish,
      _configuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [JBFundingCycleStructOutput] & {
        fundingCycle: JBFundingCycleStructOutput;
      }
    >;

    /**
     *  The latest funding cycle configuration for each project. _projectId The ID of the project to get the latest funding cycle configuration of.
     */
    latestConfigurationOf(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     *  The latest funding cycle to be configured for the specified project, and its current ballot state.
     * @param _projectId The ID of the project to get the latest configured funding cycle of.
     */
    latestConfiguredOf(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [JBFundingCycleStructOutput, number] & {
        fundingCycle: JBFundingCycleStructOutput;
        ballotState: number;
      }
    >;

    /**
     * If a queued funding cycle of the project is not found, returns an empty funding cycle with all properties set to 0.
     *  The funding cycle that's next up for the specified project.
     * @param _projectId The ID of the project to get the queued funding cycle of.
     */
    queuedOf(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [JBFundingCycleStructOutput] & {
        fundingCycle: JBFundingCycleStructOutput;
      }
    >;
  };

  configureFor(
    _projectId: BigNumberish,
    _data: JBFundingCycleDataStruct,
    _metadata: BigNumberish,
    _mustStartAtOrAfter: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   *  The current ballot state of the project.
   * @param _projectId The ID of the project to check the ballot state of.
   */
  currentBallotStateOf(
    _projectId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  /**
   * If a current funding cycle of the project is not found, returns an empty funding cycle with all properties set to 0.
   *  The funding cycle that is currently active for the specified project.
   * @param _projectId The ID of the project to get the current funding cycle of.
   */
  currentOf(
    _projectId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<JBFundingCycleStructOutput>;

  /**
   *  The directory of terminals and controllers for projects.
   */
  directory(overrides?: CallOverrides): Promise<string>;

  /**
   *  Get the funding cycle with the given configuration for the specified project.
   * @param _configuration The configuration of the funding cycle to get.
   * @param _projectId The ID of the project to which the funding cycle belongs.
   */
  get(
    _projectId: BigNumberish,
    _configuration: BigNumberish,
    overrides?: CallOverrides
  ): Promise<JBFundingCycleStructOutput>;

  /**
   *  The latest funding cycle configuration for each project. _projectId The ID of the project to get the latest funding cycle configuration of.
   */
  latestConfigurationOf(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   *  The latest funding cycle to be configured for the specified project, and its current ballot state.
   * @param _projectId The ID of the project to get the latest configured funding cycle of.
   */
  latestConfiguredOf(
    _projectId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [JBFundingCycleStructOutput, number] & {
      fundingCycle: JBFundingCycleStructOutput;
      ballotState: number;
    }
  >;

  /**
   * If a queued funding cycle of the project is not found, returns an empty funding cycle with all properties set to 0.
   *  The funding cycle that's next up for the specified project.
   * @param _projectId The ID of the project to get the queued funding cycle of.
   */
  queuedOf(
    _projectId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<JBFundingCycleStructOutput>;

  callStatic: {
    configureFor(
      _projectId: BigNumberish,
      _data: JBFundingCycleDataStruct,
      _metadata: BigNumberish,
      _mustStartAtOrAfter: BigNumberish,
      overrides?: CallOverrides
    ): Promise<JBFundingCycleStructOutput>;

    /**
     *  The current ballot state of the project.
     * @param _projectId The ID of the project to check the ballot state of.
     */
    currentBallotStateOf(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    /**
     * If a current funding cycle of the project is not found, returns an empty funding cycle with all properties set to 0.
     *  The funding cycle that is currently active for the specified project.
     * @param _projectId The ID of the project to get the current funding cycle of.
     */
    currentOf(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<JBFundingCycleStructOutput>;

    /**
     *  The directory of terminals and controllers for projects.
     */
    directory(overrides?: CallOverrides): Promise<string>;

    /**
     *  Get the funding cycle with the given configuration for the specified project.
     * @param _configuration The configuration of the funding cycle to get.
     * @param _projectId The ID of the project to which the funding cycle belongs.
     */
    get(
      _projectId: BigNumberish,
      _configuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<JBFundingCycleStructOutput>;

    /**
     *  The latest funding cycle configuration for each project. _projectId The ID of the project to get the latest funding cycle configuration of.
     */
    latestConfigurationOf(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     *  The latest funding cycle to be configured for the specified project, and its current ballot state.
     * @param _projectId The ID of the project to get the latest configured funding cycle of.
     */
    latestConfiguredOf(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [JBFundingCycleStructOutput, number] & {
        fundingCycle: JBFundingCycleStructOutput;
        ballotState: number;
      }
    >;

    /**
     * If a queued funding cycle of the project is not found, returns an empty funding cycle with all properties set to 0.
     *  The funding cycle that's next up for the specified project.
     * @param _projectId The ID of the project to get the queued funding cycle of.
     */
    queuedOf(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<JBFundingCycleStructOutput>;
  };

  filters: {
    "Configure(uint256,uint256,tuple,uint256,uint256,address)"(
      configuration?: BigNumberish | null,
      projectId?: BigNumberish | null,
      data?: null,
      metadata?: null,
      mustStartAtOrAfter?: null,
      caller?: null
    ): ConfigureEventFilter;
    Configure(
      configuration?: BigNumberish | null,
      projectId?: BigNumberish | null,
      data?: null,
      metadata?: null,
      mustStartAtOrAfter?: null,
      caller?: null
    ): ConfigureEventFilter;

    "Init(uint256,uint256,uint256)"(
      configuration?: BigNumberish | null,
      projectId?: BigNumberish | null,
      basedOn?: BigNumberish | null
    ): InitEventFilter;
    Init(
      configuration?: BigNumberish | null,
      projectId?: BigNumberish | null,
      basedOn?: BigNumberish | null
    ): InitEventFilter;
  };

  estimateGas: {
    configureFor(
      _projectId: BigNumberish,
      _data: JBFundingCycleDataStruct,
      _metadata: BigNumberish,
      _mustStartAtOrAfter: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     *  The current ballot state of the project.
     * @param _projectId The ID of the project to check the ballot state of.
     */
    currentBallotStateOf(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * If a current funding cycle of the project is not found, returns an empty funding cycle with all properties set to 0.
     *  The funding cycle that is currently active for the specified project.
     * @param _projectId The ID of the project to get the current funding cycle of.
     */
    currentOf(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     *  The directory of terminals and controllers for projects.
     */
    directory(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     *  Get the funding cycle with the given configuration for the specified project.
     * @param _configuration The configuration of the funding cycle to get.
     * @param _projectId The ID of the project to which the funding cycle belongs.
     */
    get(
      _projectId: BigNumberish,
      _configuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     *  The latest funding cycle configuration for each project. _projectId The ID of the project to get the latest funding cycle configuration of.
     */
    latestConfigurationOf(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     *  The latest funding cycle to be configured for the specified project, and its current ballot state.
     * @param _projectId The ID of the project to get the latest configured funding cycle of.
     */
    latestConfiguredOf(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * If a queued funding cycle of the project is not found, returns an empty funding cycle with all properties set to 0.
     *  The funding cycle that's next up for the specified project.
     * @param _projectId The ID of the project to get the queued funding cycle of.
     */
    queuedOf(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    configureFor(
      _projectId: BigNumberish,
      _data: JBFundingCycleDataStruct,
      _metadata: BigNumberish,
      _mustStartAtOrAfter: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     *  The current ballot state of the project.
     * @param _projectId The ID of the project to check the ballot state of.
     */
    currentBallotStateOf(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * If a current funding cycle of the project is not found, returns an empty funding cycle with all properties set to 0.
     *  The funding cycle that is currently active for the specified project.
     * @param _projectId The ID of the project to get the current funding cycle of.
     */
    currentOf(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     *  The directory of terminals and controllers for projects.
     */
    directory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     *  Get the funding cycle with the given configuration for the specified project.
     * @param _configuration The configuration of the funding cycle to get.
     * @param _projectId The ID of the project to which the funding cycle belongs.
     */
    get(
      _projectId: BigNumberish,
      _configuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     *  The latest funding cycle configuration for each project. _projectId The ID of the project to get the latest funding cycle configuration of.
     */
    latestConfigurationOf(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     *  The latest funding cycle to be configured for the specified project, and its current ballot state.
     * @param _projectId The ID of the project to get the latest configured funding cycle of.
     */
    latestConfiguredOf(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * If a queued funding cycle of the project is not found, returns an empty funding cycle with all properties set to 0.
     *  The funding cycle that's next up for the specified project.
     * @param _projectId The ID of the project to get the queued funding cycle of.
     */
    queuedOf(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
