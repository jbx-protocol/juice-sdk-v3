/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../../common";

export type JBSplitStruct = {
  preferClaimed: boolean;
  preferAddToBalance: boolean;
  percent: BigNumberish;
  projectId: BigNumberish;
  beneficiary: string;
  lockedUntil: BigNumberish;
  allocator: string;
};

export type JBSplitStructOutput = [
  boolean,
  boolean,
  BigNumber,
  BigNumber,
  string,
  BigNumber,
  string
] & {
  preferClaimed: boolean;
  preferAddToBalance: boolean;
  percent: BigNumber;
  projectId: BigNumber;
  beneficiary: string;
  lockedUntil: BigNumber;
  allocator: string;
};

export type JBGroupedSplitsStruct = {
  group: BigNumberish;
  splits: JBSplitStruct[];
};

export type JBGroupedSplitsStructOutput = [BigNumber, JBSplitStructOutput[]] & {
  group: BigNumber;
  splits: JBSplitStructOutput[];
};

export interface JBSplitsStoreInterface extends utils.Interface {
  functions: {
    "directory()": FunctionFragment;
    "operatorStore()": FunctionFragment;
    "projects()": FunctionFragment;
    "set(uint256,uint256,(uint256,(bool,bool,uint256,uint256,address,uint256,address)[])[])": FunctionFragment;
    "splitsOf(uint256,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "directory"
      | "operatorStore"
      | "projects"
      | "set"
      | "splitsOf"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "directory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "operatorStore",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "projects", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "set",
    values: [BigNumberish, BigNumberish, JBGroupedSplitsStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "splitsOf",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "directory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "operatorStore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "projects", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "set", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "splitsOf", data: BytesLike): Result;

  events: {
    "SetSplit(uint256,uint256,uint256,tuple,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SetSplit"): EventFragment;
}

export interface SetSplitEventObject {
  projectId: BigNumber;
  domain: BigNumber;
  group: BigNumber;
  split: JBSplitStructOutput;
  caller: string;
}
export type SetSplitEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, JBSplitStructOutput, string],
  SetSplitEventObject
>;

export type SetSplitEventFilter = TypedEventFilter<SetSplitEvent>;

export interface JBSplitsStore extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: JBSplitsStoreInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     *  The directory of terminals and controllers for projects.
     */
    directory(overrides?: CallOverrides): Promise<[string]>;

    /**
     *  A contract storing operator assignments.
     */
    operatorStore(overrides?: CallOverrides): Promise<[string]>;

    /**
     *  Mints ERC-721's that represent project ownership and transfers.
     */
    projects(overrides?: CallOverrides): Promise<[string]>;

    set(
      _projectId: BigNumberish,
      _domain: BigNumberish,
      _groupedSplits: JBGroupedSplitsStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     *  Get all splits for the specified project ID, within the specified domain, for the specified group.
     * @param _domain An identifier within which the returned splits should be considered active.
     * @param _group The identifying group of the splits.
     * @param _projectId The ID of the project to get splits for.
     */
    splitsOf(
      _projectId: BigNumberish,
      _domain: BigNumberish,
      _group: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[JBSplitStructOutput[]]>;
  };

  /**
   *  The directory of terminals and controllers for projects.
   */
  directory(overrides?: CallOverrides): Promise<string>;

  /**
   *  A contract storing operator assignments.
   */
  operatorStore(overrides?: CallOverrides): Promise<string>;

  /**
   *  Mints ERC-721's that represent project ownership and transfers.
   */
  projects(overrides?: CallOverrides): Promise<string>;

  set(
    _projectId: BigNumberish,
    _domain: BigNumberish,
    _groupedSplits: JBGroupedSplitsStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   *  Get all splits for the specified project ID, within the specified domain, for the specified group.
   * @param _domain An identifier within which the returned splits should be considered active.
   * @param _group The identifying group of the splits.
   * @param _projectId The ID of the project to get splits for.
   */
  splitsOf(
    _projectId: BigNumberish,
    _domain: BigNumberish,
    _group: BigNumberish,
    overrides?: CallOverrides
  ): Promise<JBSplitStructOutput[]>;

  callStatic: {
    /**
     *  The directory of terminals and controllers for projects.
     */
    directory(overrides?: CallOverrides): Promise<string>;

    /**
     *  A contract storing operator assignments.
     */
    operatorStore(overrides?: CallOverrides): Promise<string>;

    /**
     *  Mints ERC-721's that represent project ownership and transfers.
     */
    projects(overrides?: CallOverrides): Promise<string>;

    set(
      _projectId: BigNumberish,
      _domain: BigNumberish,
      _groupedSplits: JBGroupedSplitsStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     *  Get all splits for the specified project ID, within the specified domain, for the specified group.
     * @param _domain An identifier within which the returned splits should be considered active.
     * @param _group The identifying group of the splits.
     * @param _projectId The ID of the project to get splits for.
     */
    splitsOf(
      _projectId: BigNumberish,
      _domain: BigNumberish,
      _group: BigNumberish,
      overrides?: CallOverrides
    ): Promise<JBSplitStructOutput[]>;
  };

  filters: {
    "SetSplit(uint256,uint256,uint256,tuple,address)"(
      projectId?: BigNumberish | null,
      domain?: BigNumberish | null,
      group?: BigNumberish | null,
      split?: null,
      caller?: null
    ): SetSplitEventFilter;
    SetSplit(
      projectId?: BigNumberish | null,
      domain?: BigNumberish | null,
      group?: BigNumberish | null,
      split?: null,
      caller?: null
    ): SetSplitEventFilter;
  };

  estimateGas: {
    /**
     *  The directory of terminals and controllers for projects.
     */
    directory(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     *  A contract storing operator assignments.
     */
    operatorStore(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     *  Mints ERC-721's that represent project ownership and transfers.
     */
    projects(overrides?: CallOverrides): Promise<BigNumber>;

    set(
      _projectId: BigNumberish,
      _domain: BigNumberish,
      _groupedSplits: JBGroupedSplitsStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     *  Get all splits for the specified project ID, within the specified domain, for the specified group.
     * @param _domain An identifier within which the returned splits should be considered active.
     * @param _group The identifying group of the splits.
     * @param _projectId The ID of the project to get splits for.
     */
    splitsOf(
      _projectId: BigNumberish,
      _domain: BigNumberish,
      _group: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     *  The directory of terminals and controllers for projects.
     */
    directory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     *  A contract storing operator assignments.
     */
    operatorStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     *  Mints ERC-721's that represent project ownership and transfers.
     */
    projects(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    set(
      _projectId: BigNumberish,
      _domain: BigNumberish,
      _groupedSplits: JBGroupedSplitsStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     *  Get all splits for the specified project ID, within the specified domain, for the specified group.
     * @param _domain An identifier within which the returned splits should be considered active.
     * @param _group The identifying group of the splits.
     * @param _projectId The ID of the project to get splits for.
     */
    splitsOf(
      _projectId: BigNumberish,
      _domain: BigNumberish,
      _group: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
