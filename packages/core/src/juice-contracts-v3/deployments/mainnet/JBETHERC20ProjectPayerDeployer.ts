/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../../common";

export interface JBETHERC20ProjectPayerDeployerInterface
  extends utils.Interface {
  functions: {
    "deployProjectPayer(uint256,address,bool,string,bytes,bool,address,address)": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "deployProjectPayer"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "deployProjectPayer",
    values: [
      BigNumberish,
      string,
      boolean,
      string,
      BytesLike,
      boolean,
      string,
      string
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "deployProjectPayer",
    data: BytesLike
  ): Result;

  events: {
    "DeployProjectPayer(address,uint256,address,bool,string,bytes,bool,address,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DeployProjectPayer"): EventFragment;
}

export interface DeployProjectPayerEventObject {
  projectPayer: string;
  defaultProjectId: BigNumber;
  defaultBeneficiary: string;
  defaultPreferClaimedTokens: boolean;
  defaultMemo: string;
  defaultMetadata: string;
  preferAddToBalance: boolean;
  directory: string;
  owner: string;
  caller: string;
}
export type DeployProjectPayerEvent = TypedEvent<
  [
    string,
    BigNumber,
    string,
    boolean,
    string,
    string,
    boolean,
    string,
    string,
    string
  ],
  DeployProjectPayerEventObject
>;

export type DeployProjectPayerEventFilter =
  TypedEventFilter<DeployProjectPayerEvent>;

export interface JBETHERC20ProjectPayerDeployer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: JBETHERC20ProjectPayerDeployerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     *  Allows anyone to deploy a new project payer contract.
     * @param _defaultBeneficiary The address that'll receive the project's tokens when the project payer receives payments.
     * @param _defaultMemo The memo that'll be forwarded with the project payer's received payments.
     * @param _defaultMetadata The metadata that'll be forwarded with the project payer's received payments.
     * @param _defaultPreferAddToBalance A flag indicating if received payments should call the `pay` function or the `addToBalance` function of a project.
     * @param _defaultPreferClaimedTokens A flag indicating whether issued tokens from the project payer's received payments should be automatically claimed into the beneficiary's wallet.
     * @param _defaultProjectId The ID of the project whose treasury should be forwarded the project payer contract's received payments.
     * @param _directory A contract storing directories of terminals and controllers for each project.
     * @param _owner The address that will own the project payer.
     */
    deployProjectPayer(
      _defaultProjectId: BigNumberish,
      _defaultBeneficiary: string,
      _defaultPreferClaimedTokens: boolean,
      _defaultMemo: string,
      _defaultMetadata: BytesLike,
      _defaultPreferAddToBalance: boolean,
      _directory: string,
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  /**
   *  Allows anyone to deploy a new project payer contract.
   * @param _defaultBeneficiary The address that'll receive the project's tokens when the project payer receives payments.
   * @param _defaultMemo The memo that'll be forwarded with the project payer's received payments.
   * @param _defaultMetadata The metadata that'll be forwarded with the project payer's received payments.
   * @param _defaultPreferAddToBalance A flag indicating if received payments should call the `pay` function or the `addToBalance` function of a project.
   * @param _defaultPreferClaimedTokens A flag indicating whether issued tokens from the project payer's received payments should be automatically claimed into the beneficiary's wallet.
   * @param _defaultProjectId The ID of the project whose treasury should be forwarded the project payer contract's received payments.
   * @param _directory A contract storing directories of terminals and controllers for each project.
   * @param _owner The address that will own the project payer.
   */
  deployProjectPayer(
    _defaultProjectId: BigNumberish,
    _defaultBeneficiary: string,
    _defaultPreferClaimedTokens: boolean,
    _defaultMemo: string,
    _defaultMetadata: BytesLike,
    _defaultPreferAddToBalance: boolean,
    _directory: string,
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     *  Allows anyone to deploy a new project payer contract.
     * @param _defaultBeneficiary The address that'll receive the project's tokens when the project payer receives payments.
     * @param _defaultMemo The memo that'll be forwarded with the project payer's received payments.
     * @param _defaultMetadata The metadata that'll be forwarded with the project payer's received payments.
     * @param _defaultPreferAddToBalance A flag indicating if received payments should call the `pay` function or the `addToBalance` function of a project.
     * @param _defaultPreferClaimedTokens A flag indicating whether issued tokens from the project payer's received payments should be automatically claimed into the beneficiary's wallet.
     * @param _defaultProjectId The ID of the project whose treasury should be forwarded the project payer contract's received payments.
     * @param _directory A contract storing directories of terminals and controllers for each project.
     * @param _owner The address that will own the project payer.
     */
    deployProjectPayer(
      _defaultProjectId: BigNumberish,
      _defaultBeneficiary: string,
      _defaultPreferClaimedTokens: boolean,
      _defaultMemo: string,
      _defaultMetadata: BytesLike,
      _defaultPreferAddToBalance: boolean,
      _directory: string,
      _owner: string,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "DeployProjectPayer(address,uint256,address,bool,string,bytes,bool,address,address,address)"(
      projectPayer?: string | null,
      defaultProjectId?: null,
      defaultBeneficiary?: null,
      defaultPreferClaimedTokens?: null,
      defaultMemo?: null,
      defaultMetadata?: null,
      preferAddToBalance?: null,
      directory?: null,
      owner?: null,
      caller?: null
    ): DeployProjectPayerEventFilter;
    DeployProjectPayer(
      projectPayer?: string | null,
      defaultProjectId?: null,
      defaultBeneficiary?: null,
      defaultPreferClaimedTokens?: null,
      defaultMemo?: null,
      defaultMetadata?: null,
      preferAddToBalance?: null,
      directory?: null,
      owner?: null,
      caller?: null
    ): DeployProjectPayerEventFilter;
  };

  estimateGas: {
    /**
     *  Allows anyone to deploy a new project payer contract.
     * @param _defaultBeneficiary The address that'll receive the project's tokens when the project payer receives payments.
     * @param _defaultMemo The memo that'll be forwarded with the project payer's received payments.
     * @param _defaultMetadata The metadata that'll be forwarded with the project payer's received payments.
     * @param _defaultPreferAddToBalance A flag indicating if received payments should call the `pay` function or the `addToBalance` function of a project.
     * @param _defaultPreferClaimedTokens A flag indicating whether issued tokens from the project payer's received payments should be automatically claimed into the beneficiary's wallet.
     * @param _defaultProjectId The ID of the project whose treasury should be forwarded the project payer contract's received payments.
     * @param _directory A contract storing directories of terminals and controllers for each project.
     * @param _owner The address that will own the project payer.
     */
    deployProjectPayer(
      _defaultProjectId: BigNumberish,
      _defaultBeneficiary: string,
      _defaultPreferClaimedTokens: boolean,
      _defaultMemo: string,
      _defaultMetadata: BytesLike,
      _defaultPreferAddToBalance: boolean,
      _directory: string,
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     *  Allows anyone to deploy a new project payer contract.
     * @param _defaultBeneficiary The address that'll receive the project's tokens when the project payer receives payments.
     * @param _defaultMemo The memo that'll be forwarded with the project payer's received payments.
     * @param _defaultMetadata The metadata that'll be forwarded with the project payer's received payments.
     * @param _defaultPreferAddToBalance A flag indicating if received payments should call the `pay` function or the `addToBalance` function of a project.
     * @param _defaultPreferClaimedTokens A flag indicating whether issued tokens from the project payer's received payments should be automatically claimed into the beneficiary's wallet.
     * @param _defaultProjectId The ID of the project whose treasury should be forwarded the project payer contract's received payments.
     * @param _directory A contract storing directories of terminals and controllers for each project.
     * @param _owner The address that will own the project payer.
     */
    deployProjectPayer(
      _defaultProjectId: BigNumberish,
      _defaultBeneficiary: string,
      _defaultPreferClaimedTokens: boolean,
      _defaultMemo: string,
      _defaultMetadata: BytesLike,
      _defaultPreferAddToBalance: boolean,
      _directory: string,
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
